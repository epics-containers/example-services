// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-docker-compose
{
	"name": "example services simulation beamine with Docker Compose",
	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	// The .devcontainer/docker-compose.yml file contains any overrides you need/want to make.
	"dockerComposeFile": [
		"../compose.yaml"
	],
	// The 'service' property is the name of the service for the container that VS Code should use
	// as the devcontainer.
	// IMPORTANT: the container you choose here MUST mount the project folder. giles chooses to
	// mount the parent of the project folder to /workspaces so we can see peer projects in the
	// container and add them to the vscode workspace.
	"service": "bl01t-di-cam-01-dev",
	// the services from the compose.yaml that we want to run
	"runServices": [
		"bl01t-di-cam-01-dev",
		"phoebus",
		"ca-gateway",
		"pvagw"
	],
	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	"workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	// for podman we must be user root in the containers
	"remoteUser": "root"
	//
	//
	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],
	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],
	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	// "shutdownAction": "none",
	// Uncomment the next line to run commands after the container is created.
	// "postCreateCommand": "cat /etc/os-release",
	// Configure tool-specific properties.
	// "customizations": {},
}